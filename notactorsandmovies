/*Here I've created a database with tables for actors and their last movie, 
a table for genres showcasing different movie categoties, and a table for 
production information.*/

CREATE TABLE moviestars (ID INTEGER PRIMARY KEY, fullname TEXT , lastmovie INTEGER);

INSERT INTO moviestars (fullname, lastmovie) VALUES ("Sandra Bullocked", 2019);
INSERT INTO moviestars (fullname, lastmovie)
VALUES ("Ben Stillered", 2020);
INSERT INTO moviestars (fullname, lastmovie)
VALUES ("Michael B. Jordaned", 2022);

CREATE TABLE genre (ID INTEGER PRIMARY KEY, actor_id INTEGER, genrename TEXT, ranking INTEGER);

INSERT INTO genre (genrename, actor_id, ranking) VALUES ("drama", 1, 5);
INSERT INTO genre (genrename, actor_id, ranking) VALUES ("comedy",2, 2);
INSERT INTO genre (genrename, actor_id, ranking) VALUES ("action",3, 1);

CREATE TABLE production (id INTEGER PRIMARY KEY, pro_id INTEGER,
productiontype TEXT, studio TEXT);

INSERT INTO production (pro_id,
productiontype, studio) VALUES (10, "television", "netflixed");
INSERT INTO production (pro_id,
productiontype, studio) VALUES (11, "broadway", "warnered brother");
INSERT INTO production (pro_id,
productiontype, studio) VALUES (12, "movie", "amazon primed");
INSERT INTO production (pro_id,
productiontype, studio) VALUES (13, "music", "def jammed");

SELECT moviestars.fullname, moviestars.lastmovie, genre.genrename, genre.ranking
FROM moviestars
JOIN genre
ON moviestars.id = genre.actor_id;

/* Here I used a self join in order to group the primary key to it's respective row for further querying*/


SELECT production.id, production.pro_id, production.productiontype, production.studio
FROM production 
JOIN production b
ON production.id = b.id;


/* Here I was able to join all three tables to show the most comprehesive data about each actor*/

SELECT moviestars.fullname AS actor, moviestars.lastmovie, genre.genrename AS moviegenre, genre.ranking AS genrerank, production.productiontype
FROM moviestars
JOIN genre
ON moviestars.id = genre.actor_id
JOIN production
ON genre.id = production.id;


*Here I used a case statement in order to add a temporary column to show the associate award for each production type.*/

SELECT moviestars.fullname AS actor, genre.genrename AS genre, production.productiontype,
CASE WHEN productiontype = "television" THEN "emmy" 
	 WHEN productiontype = "broadway' THEN "tony" 
	 WHEN productiontype = "movie" THEN "oscar"
ELSE 'other'
END AS 'associatedaward'
FROM production
JOIN genre
ON production.id = genre.actor_id
JOIN moviestars
ON genre.actor_id = moviestars.id;



